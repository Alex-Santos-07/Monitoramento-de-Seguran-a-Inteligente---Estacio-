# -*- coding: utf-8 -*-
"""Código de Monitoramente de segurança inteligente.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Zk2UeKb8j7p02uNQ3YZTuANi87o1wJvT
"""

#Código Desenvolvido Andrade com colaboração de Alex Santos e Gabriel Cabral



#Código Geral

from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtCore import QTimer, QCoreApplication, QRect, Qt
from PySide6.QtGui import QFont
from PySide6.QtWidgets import QMainWindow, QLabel, QTableWidget, QTableWidgetItem, QPushButton, QWidget, QStatusBar, QMenuBar
import random

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(600, 500)
        font = QtGui.QFont("Arial", 10)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet(u"background-color: rgb(74, 74, 255)")

        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")

        # Label de título
        self.label = QLabel(self.centralwidget)
        self.label.setObjectName(u"label")
        self.label.setGeometry(QRect(150, 0, 301, 51))
        font1 = QFont()
        font1.setPointSize(16)
        self.label.setFont(font1)

        # Tabela de status de monitoramento
        self.tableWidget = QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QRect(20, 60, 561, 350))
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setHorizontalHeaderLabels(["Câmera", "Status", "Hora"])
        self.tableWidget.setStyleSheet(u"background-color:rgb(0, 255, 127)")
        self.tableWidget.setGridStyle(Qt.PenStyle.NoPen)

        # Botão de Iniciar Monitoramento
        self.pushButton = QPushButton(self.centralwidget)
        self.pushButton.setObjectName(u"pushButton")
        self.pushButton.setGeometry(QRect(220, 430, 150, 40))
        font2 = QFont()
        font2.setPointSize(12)
        font2.setBold(True)
        self.pushButton.setFont(font2)
        self.pushButton.setStyleSheet(u"background-color:rgb(255, 0, 0)")
        self.pushButton.setText("Iniciar Monitoramento")
        self.pushButton.clicked.connect(self.start_monitoring)

        # Configurações de Janela Principal
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setGeometry(QRect(0, 0, 600, 22))
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        MainWindow.setStatusBar(self.statusbar)

        # Timer para simular detecção de movimento
        self.timer = QTimer()
        self.timer.timeout.connect(self.detect_movement)

        # Índice de câmera para simulação
        self.camera_index = 0

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"Monitoramento de Segurança", None))
        self.label.setText(QCoreApplication.translate("MainWindow", u"Monitoramento de Câmeras", None))

    def start_monitoring(self):
        self.timer.start(2000)  # Verifica movimento a cada 2 segundos
        self.pushButton.setText("Monitorando...")

    def detect_movement(self):
        # Simular detecção de movimento com probabilidade aleatória
        camera_names = ["Câmera 1", "Câmera 2", "Câmera 3", "Câmera 4", "Câmera 5"]
        status_options = ["Nenhum movimento", "Movimento detectado"]

        if self.camera_index >= len(camera_names):
            self.camera_index = 0

        current_camera = camera_names[self.camera_index]
        status = random.choice(status_options)
        time_detected = QtCore.QTime.currentTime().toString()

        # Adiciona ou atualiza uma linha na tabela com o status da câmera
        self.tableWidget.setRowCount(self.camera_index + 1)
        self.tableWidget.setItem(self.camera_index, 0, QTableWidgetItem(current_camera))
        self.tableWidget.setItem(self.camera_index, 1, QTableWidgetItem(status))
        self.tableWidget.setItem(self.camera_index, 2, QTableWidgetItem(time_detected))

        self.camera_index += 1

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())




--------------------------------------------------------------------------------




# Detecção de movimentos:


from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtCore import QTimer, QRect, QCoreApplication, Qt
from PySide6.QtGui import QFont, QColor
from PySide6.QtWidgets import QMainWindow, QLabel, QTableWidget, QTableWidgetItem, QPushButton, QWidget, QStatusBar, QMenuBar, QFrame
import random

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(800, 600)
        font = QtGui.QFont("Arial", 10)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet(u"background-color: rgb(74, 74, 255)")

        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")

        # Label de título
        self.label = QLabel(self.centralwidget)
        self.label.setObjectName(u"label")
        self.label.setGeometry(QRect(150, 0, 301, 51))
        font1 = QFont()
        font1.setPointSize(16)
        self.label.setFont(font1)

        # Tabela de status de monitoramento
        self.tableWidget = QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QRect(20, 350, 561, 200))
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setHorizontalHeaderLabels(["Câmera", "Status", "Hora"])
        self.tableWidget.setStyleSheet(u"background-color:rgb(0, 255, 127)")
        self.tableWidget.setGridStyle(Qt.PenStyle.NoPen)

        # Botão de Iniciar Monitoramento
        self.pushButton = QPushButton(self.centralwidget)
        self.pushButton.setObjectName(u"pushButton")
        self.pushButton.setGeometry(QRect(220, 270, 150, 40))
        font2 = QFont()
        font2.setPointSize(12)
        font2.setBold(True)
        self.pushButton.setFont(font2)
        self.pushButton.setStyleSheet(u"background-color:rgb(255, 0, 0)")
        self.pushButton.setText("Iniciar Monitoramento")
        self.pushButton.clicked.connect(self.start_monitoring)

        # Blocos de Detecção de Movimento
        self.blocks = []
        block_positions = [(20, 60), (140, 60), (260, 60), (380, 60), (500, 60)]

        for pos in block_positions:
            block = QFrame(self.centralwidget)
            block.setGeometry(QRect(pos[0], pos[1], 100, 100))
            block.setStyleSheet("background-color: green; border: 2px solid black;")
            self.blocks.append(block)

        # Configurações de Janela Principal
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setGeometry(QRect(0, 0, 600, 22))
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        MainWindow.setStatusBar(self.statusbar)

        # Timer para simular detecção de movimento
        self.timer = QTimer()
        self.timer.timeout.connect(self.detect_movement)

        # Índice de câmera para simulação
        self.camera_index = 0

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"Monitoramento de Segurança", None))
        self.label.setText(QCoreApplication.translate("MainWindow", u"Monitoramento de Câmeras", None))

    def start_monitoring(self):
        self.timer.start(2000)  # Verifica movimento a cada 2 segundos
        self.pushButton.setText("Monitorando...")

    def detect_movement(self):
        # Simular detecção de movimento com probabilidade aleatória
        camera_names = ["Câmera 1", "Câmera 2", "Câmera 3", "Câmera 4", "Câmera 5"]
        status_options = ["Nenhum movimento", "Movimento detectado"]

        if self.camera_index >= len(camera_names):
            self.camera_index = 0

        current_camera = camera_names[self.camera_index]
        status = random.choice(status_options)
        time_detected = QtCore.QTime.currentTime().toString()

        # Atualiza a tabela
        self.tableWidget.setRowCount(self.camera_index + 1)
        self.tableWidget.setItem(self.camera_index, 0, QTableWidgetItem(current_camera))
        self.tableWidget.setItem(self.camera_index, 1, QTableWidgetItem(status))
        self.tableWidget.setItem(self.camera_index, 2, QTableWidgetItem(time_detected))

        # Atualiza o bloco da câmera
        if status == "Movimento detectado":
            self.blocks[self.camera_index].setStyleSheet("background-color: red; border: 2px solid black;")
        else:
            self.blocks[self.camera_index].setStyleSheet("background-color: green; border: 2px solid black;")

        self.camera_index += 1

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()


    ----------------------------------------------------------------------------


# Alertar Central sobre possível ameaça

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(800, 600)
        font = QtGui.QFont("Arial", 10)
        MainWindow.setFont(font)
        MainWindow.setStyleSheet(u"background-color: rgb(74, 74, 255)")

        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")

        # Label de título
        self.label = QLabel(self.centralwidget)
        self.label.setObjectName(u"label")
        self.label.setGeometry(QRect(150, 0, 301, 51))
        font1 = QFont()
        font1.setPointSize(16)
        self.label.setFont(font1)

        # Tabela de status de monitoramento
        self.tableWidget = QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QRect(20, 350, 561, 200))
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setHorizontalHeaderLabels(["Câmera", "Status", "Hora"])
        self.tableWidget.setStyleSheet(u"background-color:rgb(0, 255, 127)")
        self.tableWidget.setGridStyle(Qt.PenStyle.NoPen)

        # Botão de Iniciar Monitoramento
        self.pushButton = QPushButton(self.centralwidget)
        self.pushButton.setObjectName(u"pushButton")
        self.pushButton.setGeometry(QRect(220, 270, 150, 40))
        font2 = QFont()
        font2.setPointSize(12)
        font2.setBold(True)
        self.pushButton.setFont(font2)
        self.pushButton.setStyleSheet(u"background-color:rgb(255, 0, 0)")
        self.pushButton.setText("Iniciar Monitoramento")
        self.pushButton.clicked.connect(self.start_monitoring)

        # Blocos de Detecção de Movimento
        self.blocks = []
        block_positions = [(20, 60), (140, 60), (260, 60), (380, 60), (500, 60)]

        for pos in block_positions:
            block = QFrame(self.centralwidget)
            block.setGeometry(QRect(pos[0], pos[1], 100, 100))
            block.setStyleSheet("background-color: green; border: 2px solid black;")
            self.blocks.append(block)

        # Configurações de Janela Principal
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setGeometry(QRect(0, 0, 600, 22))
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        MainWindow.setStatusBar(self.statusbar)

        # Timer para simular detecção de movimento
        self.timer = QTimer()
        self.timer.timeout.connect(self.detect_movement)

        # Índice de câmera para simulação
        self.camera_index = 0

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"Monitoramento de Segurança", None))
        self.label.setText(QCoreApplication.translate("MainWindow", u"Monitoramento de Câmeras", None))

    def start_monitoring(self):
        self.timer.start(2000)  # Verifica movimento a cada 2 segundos
        self.pushButton.setText("Monitorando...")

    def detect_movement(self):
        # Simular detecção de movimento com probabilidade aleatória
        camera_names = ["Câmera 1", "Câmera 2", "Câmera 3", "Câmera 4", "Câmera 5"]
        status_options = ["Nenhum movimento", "Movimento detectado"]

        if self.camera_index >= len(camera_names):
            self.camera_index = 0

        current_camera = camera_names[self.camera_index]
        status = random.choice(status_options)
        time_detected = QtCore.QTime.currentTime().toString()

        # Atualiza a tabela
        self.tableWidget.setRowCount(self.camera_index + 1)
        self.tableWidget.setItem(self.camera_index, 0, QTableWidgetItem(current_camera))
        self.tableWidget.setItem(self.camera_index, 1, QTableWidgetItem(status))
        self.tableWidget.setItem(self.camera_index, 2, QTableWidgetItem(time_detected))

        # Atualiza o bloco da câmera
        if status == "Movimento detectado":
            self.blocks[self.camera_index].setStyleSheet("background-color: red; border: 2px solid black;")
            self.alert_central(current_camera)  # Alerta a central
        else:
            self.blocks[self.camera_index].setStyleSheet("background-color: green; border: 2px solid black;")

        self.camera_index += 1

    def alert_central(self, camera):
        # Simula o alerta à central
        alert_message = f"Alerta: Movimento detectado na {camera}!"
        QMessageBox.warning(None, "Alerta de Segurança", alert_message)

if __name__ == "__main__":
    import sys

--------------------------------------------------------------------------------